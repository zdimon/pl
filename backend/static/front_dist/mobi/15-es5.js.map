{"version":3,"sources":["/home/zdimon/Desktop/ij/frontend/angular/node_modules/@ionic/core/dist/esm/ion-input.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, e as createEvent, h, H as Host, i as getElement } from './index-92848855.js';\nimport { b as getIonMode } from './ionic-global-23e7365a.js';\nimport { d as debounceEvent, f as findItemLabel } from './helpers-5c745fbd.js';\nimport { c as createColorClasses } from './theme-5641d27f.js';\n\nconst inputIosCss = \".sc-ion-input-ios-h{--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--background:transparent;--color:initial;display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;width:100%;padding:0 !important;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);z-index:2}ion-item.sc-ion-input-ios-h:not(.item-label),ion-item:not(.item-label) .sc-ion-input-ios-h{--padding-start:0}.ion-color.sc-ion-input-ios-h{color:var(--ion-color-base)}.native-input.sc-ion-input-ios{border-radius:var(--border-radius);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:inline-block;-ms-flex:1;flex:1;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.native-input.sc-ion-input-ios{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-input.sc-ion-input-ios::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-ios:-webkit-autofill{background-color:transparent}.native-input.sc-ion-input-ios:invalid{-webkit-box-shadow:none;box-shadow:none}.native-input.sc-ion-input-ios::-ms-clear{display:none}.native-input[disabled].sc-ion-input-ios{opacity:0.4}.cloned-input.sc-ion-input-ios{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-input-ios .cloned-input.sc-ion-input-ios,[dir=rtl].sc-ion-input-ios-h .cloned-input.sc-ion-input-ios,[dir=rtl] .sc-ion-input-ios-h .cloned-input.sc-ion-input-ios{left:unset;right:unset;right:0}.input-clear-icon.sc-ion-input-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;background-position:center;border:0;outline:none;background-color:transparent;background-repeat:no-repeat;visibility:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}.input-clear-icon.sc-ion-input-ios:focus{opacity:0.5}.has-value.sc-ion-input-ios-h .input-clear-icon.sc-ion-input-ios{visibility:visible}.has-focus.sc-ion-input-ios-h{pointer-events:none}.has-focus.sc-ion-input-ios-h input.sc-ion-input-ios,.has-focus.sc-ion-input-ios-h a.sc-ion-input-ios,.has-focus.sc-ion-input-ios-h button.sc-ion-input-ios{pointer-events:auto}.sc-ion-input-ios-h{--padding-top:10px;--padding-end:10px;--padding-bottom:10px;--padding-start:0;font-size:inherit}.item-label-stacked.sc-ion-input-ios-h,.item-label-stacked .sc-ion-input-ios-h,.item-label-floating.sc-ion-input-ios-h,.item-label-floating .sc-ion-input-ios-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0px}.input-clear-icon.sc-ion-input-ios{background-image:url(\\\"data:image/svg+xml;charset=utf-8,<svg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20512%20512'><path%20fill='var(--ion-color-step-600,%20%23666666)'%20d='M403.1,108.9c-81.2-81.2-212.9-81.2-294.2,0s-81.2,212.9,0,294.2c81.2,81.2,212.9,81.2,294.2,0S484.3,190.1,403.1,108.9z%20M352,340.2L340.2,352l-84.4-84.2l-84,83.8L160,339.8l84-83.8l-84-83.8l11.8-11.8l84,83.8l84.4-84.2l11.8,11.8L267.6,256L352,340.2z'/></svg>\\\");width:30px;height:30px;background-size:18px}\";\n\nconst inputMdCss = \".sc-ion-input-md-h{--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-end:0;--padding-bottom:0;--padding-start:0;--background:transparent;--color:initial;display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;width:100%;padding:0 !important;background:var(--background);color:var(--color);font-family:var(--ion-font-family, inherit);z-index:2}ion-item.sc-ion-input-md-h:not(.item-label),ion-item:not(.item-label) .sc-ion-input-md-h{--padding-start:0}.ion-color.sc-ion-input-md-h{color:var(--ion-color-base)}.native-input.sc-ion-input-md{border-radius:var(--border-radius);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:inline-block;-ms-flex:1;flex:1;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.native-input.sc-ion-input-md{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-input.sc-ion-input-md::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md:-webkit-autofill{background-color:transparent}.native-input.sc-ion-input-md:invalid{-webkit-box-shadow:none;box-shadow:none}.native-input.sc-ion-input-md::-ms-clear{display:none}.native-input[disabled].sc-ion-input-md{opacity:0.4}.cloned-input.sc-ion-input-md{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-input-md .cloned-input.sc-ion-input-md,[dir=rtl].sc-ion-input-md-h .cloned-input.sc-ion-input-md,[dir=rtl] .sc-ion-input-md-h .cloned-input.sc-ion-input-md{left:unset;right:unset;right:0}.input-clear-icon.sc-ion-input-md{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;background-position:center;border:0;outline:none;background-color:transparent;background-repeat:no-repeat;visibility:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}.input-clear-icon.sc-ion-input-md:focus{opacity:0.5}.has-value.sc-ion-input-md-h .input-clear-icon.sc-ion-input-md{visibility:visible}.has-focus.sc-ion-input-md-h{pointer-events:none}.has-focus.sc-ion-input-md-h input.sc-ion-input-md,.has-focus.sc-ion-input-md-h a.sc-ion-input-md,.has-focus.sc-ion-input-md-h button.sc-ion-input-md{pointer-events:auto}.sc-ion-input-md-h{--padding-top:10px;--padding-end:0;--padding-bottom:10px;--padding-start:8px;font-size:inherit}.item-label-stacked.sc-ion-input-md-h,.item-label-stacked .sc-ion-input-md-h,.item-label-floating.sc-ion-input-md-h,.item-label-floating .sc-ion-input-md-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0}.input-clear-icon.sc-ion-input-md{background-image:url(\\\"data:image/svg+xml;charset=utf-8,<svg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20512%20512'><polygon%20fill='var(--ion-color-step-600,%20%23666666)'%20points='405,136.798%20375.202,107%20256,226.202%20136.798,107%20107,136.798%20226.202,256%20107,375.202%20136.798,405%20256,285.798%20375.202,405%20405,375.202%20285.798,256'/></svg>\\\");width:30px;height:30px;background-size:22px}\";\n\nconst Input = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionInput = createEvent(this, \"ionInput\", 7);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.inputId = `ion-input-${inputIds++}`;\n        this.didBlurAfterEdit = false;\n        /**\n         * This is required for a WebKit bug which requires us to\n         * blur and focus an input to properly focus the input in\n         * an item with delegatesFocus. It will no longer be needed\n         * with iOS 14.\n         *\n         * @internal\n         */\n        this.fireFocusEvents = true;\n        this.hasFocus = false;\n        /**\n         * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n         */\n        this.autocapitalize = 'off';\n        /**\n         * Indicates whether the value of the control can be automatically completed by the browser.\n         */\n        this.autocomplete = 'off';\n        /**\n         * Whether auto correction should be enabled when the user is entering/editing the text value.\n         */\n        this.autocorrect = 'off';\n        /**\n         * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n         */\n        this.autofocus = false;\n        /**\n         * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n         */\n        this.clearInput = false;\n        /**\n         * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n         */\n        this.debounce = 0;\n        /**\n         * If `true`, the user cannot interact with the input.\n         */\n        this.disabled = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot modify the value.\n         */\n        this.readonly = false;\n        /**\n         * If `true`, the user must fill in a value before submitting a form.\n         */\n        this.required = false;\n        /**\n         * If `true`, the element will have its spelling and grammar checked.\n         */\n        this.spellcheck = false;\n        /**\n         * The type of control to display. The default type is text.\n         */\n        this.type = 'text';\n        /**\n         * The value of the input.\n         */\n        this.value = '';\n        this.onInput = (ev) => {\n            const input = ev.target;\n            if (input) {\n                this.value = input.value || '';\n            }\n            this.ionInput.emit(ev);\n        };\n        this.onBlur = (ev) => {\n            this.hasFocus = false;\n            this.focusChanged();\n            this.emitStyle();\n            if (this.fireFocusEvents) {\n                this.ionBlur.emit(ev);\n            }\n        };\n        this.onFocus = (ev) => {\n            this.hasFocus = true;\n            this.focusChanged();\n            this.emitStyle();\n            if (this.fireFocusEvents) {\n                this.ionFocus.emit(ev);\n            }\n        };\n        this.onKeydown = (ev) => {\n            if (this.shouldClearOnEdit()) {\n                // Did the input value change after it was blurred and edited?\n                // Do not clear if user is hitting Enter to submit form\n                if (this.didBlurAfterEdit && this.hasValue() && ev.key !== 'Enter') {\n                    // Clear the input\n                    this.clearTextInput();\n                }\n                // Reset the flag\n                this.didBlurAfterEdit = false;\n            }\n        };\n        this.clearTextOnEnter = (ev) => {\n            if (ev.key === 'Enter') {\n                this.clearTextInput(ev);\n            }\n        };\n        this.clearTextInput = (ev) => {\n            if (this.clearInput && !this.readonly && !this.disabled && ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                // Attempt to focus input again after pressing clear button\n                this.setFocus();\n            }\n            this.value = '';\n            /**\n             * This is needed for clearOnEdit\n             * Otherwise the value will not be cleared\n             * if user is inside the input\n             */\n            if (this.nativeInput) {\n                this.nativeInput.value = '';\n            }\n        };\n    }\n    debounceChanged() {\n        this.ionChange = debounceEvent(this.ionChange, this.debounce);\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        this.emitStyle();\n        this.ionChange.emit({ value: this.value == null ? this.value : this.value.toString() });\n    }\n    componentWillLoad() {\n        // If the ion-input has a tabindex attribute we get the value\n        // and pass it down to the native input, then remove it from the\n        // ion-input to avoid causing tabbing twice on the same element\n        if (this.el.hasAttribute('tabindex')) {\n            const tabindex = this.el.getAttribute('tabindex');\n            this.tabindex = tabindex !== null ? tabindex : undefined;\n            this.el.removeAttribute('tabindex');\n        }\n    }\n    connectedCallback() {\n        this.emitStyle();\n        this.debounceChanged();\n        {\n            document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: this.el\n            }));\n        }\n    }\n    disconnectedCallback() {\n        {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el\n            }));\n        }\n    }\n    /**\n     * Sets focus on the native `input` in `ion-input`. Use this method instead of the global\n     * `input.focus()`.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Sets blur on the native `input` in `ion-input`. Use this method instead of the global\n     * `input.blur()`.\n     * @internal\n     */\n    async setBlur() {\n        if (this.nativeInput) {\n            this.nativeInput.blur();\n        }\n    }\n    /**\n     * Returns the native `<input>` element used under the hood.\n     */\n    getInputElement() {\n        return Promise.resolve(this.nativeInput);\n    }\n    shouldClearOnEdit() {\n        const { type, clearOnEdit } = this;\n        return (clearOnEdit === undefined)\n            ? type === 'password'\n            : clearOnEdit;\n    }\n    getValue() {\n        return typeof this.value === 'number' ? this.value.toString() :\n            (this.value || '').toString();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'interactive': true,\n            'input': true,\n            'has-placeholder': this.placeholder != null,\n            'has-value': this.hasValue(),\n            'has-focus': this.hasFocus,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    focusChanged() {\n        // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n        if (!this.hasFocus && this.shouldClearOnEdit() && this.hasValue()) {\n            this.didBlurAfterEdit = true;\n        }\n    }\n    hasValue() {\n        return this.getValue().length > 0;\n    }\n    render() {\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const labelId = this.inputId + '-lbl';\n        const label = findItemLabel(this.el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { \"aria-disabled\": this.disabled ? 'true' : null, class: createColorClasses(this.color, {\n                [mode]: true,\n                'has-value': this.hasValue(),\n                'has-focus': this.hasFocus\n            }) }, h(\"input\", { class: \"native-input\", ref: input => this.nativeInput = input, \"aria-labelledby\": labelId, disabled: this.disabled, accept: this.accept, autoCapitalize: this.autocapitalize, autoComplete: this.autocomplete, autoCorrect: this.autocorrect, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, multiple: this.multiple, name: this.name, pattern: this.pattern, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck, step: this.step, size: this.size, tabindex: this.tabindex, type: this.type, value: value, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeydown }), (this.clearInput && !this.readonly && !this.disabled) && h(\"button\", { \"aria-label\": \"reset\", type: \"button\", class: \"input-clear-icon\", onTouchStart: this.clearTextInput, onMouseDown: this.clearTextInput, onKeyDown: this.clearTextOnEnter })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"debounce\": [\"debounceChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nlet inputIds = 0;\nInput.style = {\n    ios: inputIosCss,\n    md: inputMdCss\n};\n\nexport { Input as ion_input };\n"],"sourceRoot":"webpack:///","file":"15-es5.js"}